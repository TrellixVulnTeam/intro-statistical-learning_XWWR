{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import pandas as pd\
from sklearn.metrics import mean_absolute_error\
from sklearn.model_selection import train_test_split\
from sklearn.tree import DecisionTreeRegressor\
\
\
# Path of the file to read\
iowa_file_path = '../input/home-data-for-ml-course/train.csv'\
\
home_data = pd.read_csv(iowa_file_path)\
# Create target object and call it y\
y = home_data.SalePrice\
# Create X\
features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\
X = home_data[features]\
\
# Split into validation and training data\
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\
\
# Specify Model\
iowa_model = DecisionTreeRegressor(random_state=1)\
# Fit Model\
iowa_model.fit(train_X, train_y)\
\
# Make validation predictions and calculate mean absolute error\
val_predictions = iowa_model.predict(val_X)\
val_mae = mean_absolute_error(val_predictions, val_y)\
print("Validation MAE: \{:,.0f\}".format(val_mae))\
\
def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\
    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\
    model.fit(train_X, train_y)\
    preds_val = model.predict(val_X)\
    mae = mean_absolute_error(val_y, preds_val)\
    return(mae)\
\
\
candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500]\
# Write loop to find the ideal tree size from candidate_max_leaf_nodes\
maes = []\
\
for m_l_nodes in candidate_max_leaf_nodes:\
    maes.append(get_mae(m_l_nodes, train_X, val_X, train_y, val_y))\
\
\
# Store the best value of max_leaf_nodes (it will be either 5, 25, 50, 100, 250 or 500)\
import numpy as np\
\
\
best_tree_size = candidate_max_leaf_nodes[np.argmin(maes)]\
print(best_tree_size)\
\
# Fill in argument to make optimal size and uncomment\
final_model = DecisionTreeRegressor(max_leaf_nodes=best_tree_size)\
\
# fit the final model and uncomment the next two lines\
final_model.fit(X,y)}